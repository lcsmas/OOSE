// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import ocsf.client.*;import common.*;import java.io.*;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient extends AbstractClient{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;     //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String host, int port, ChatIF clientUI)     throws IOException   {    super(host, port); //Call the superclass constructor    this.clientUI = clientUI;    clientUI.display("Pour vous connecter au chat utilisez la commande : #login <pseudo>");  }    //Instance methods ************************************************      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {	  if( msg.toString().startsWith("#close")) {		  clientUI.display("Le serveur a coupé la connexion");		  try {			closeConnection();		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	  } else {		  clientUI.display(msg.toString());	  }      }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromClientUI(String message)  {    try    {      if(message.startsWith("#")) {    	  handleCommand(message);      }      else sendToServer(message);    }    catch(IOException e)    {      clientUI.display        ("Could not send message to server.  Terminating client.");      quit();    }  }    private void handleCommand(String message) {	  if (message.startsWith("#quit")) {		  quit();	  }	  else if(message.startsWith("#logoff")) {		  if(isConnected()) {			  try {				  sendToServer(message);				  closeConnection();			  } catch (IOException e) {}		  }		  else {			  clientUI.display("Vous êtes déjà déconnecté");		  }	  }	  else if(message.startsWith("#sethost")) {		  String[] host = message.split(" ");		  setHost(host[1]); 	  }	  else if(message.startsWith("#setport")) {		  String[] port = message.split(" ");		  setPort(Integer.parseInt(port[1])); 	  }	  else if(message.startsWith("#login")) {		  if(!isConnected()) {			  if(message.split(" ").length < 2) {				  clientUI.display("Vous devez spécifier un identifiant");			  } else {				  try {					  openConnection();					  sendToServer(message);				  } catch (IOException e) {					  e.printStackTrace();				  }			  } 		  }		  else {			  clientUI.display("Vous êtes déjà connecté");		  }	  }	  else if(message.startsWith("#gethost")) {		  clientUI.display("host : "+ getHost());	  }	  else if(message.startsWith("#getport")) {		  clientUI.display("port : "+ getPort());	  } 	  	  else {		  clientUI.display("Commande incorrecte");	  }  }    /**   * This method terminates the client.   */  public void quit()  {    try    {      closeConnection();    }    catch(IOException e) {}    System.exit(0);  }  @Override  protected void connectionClosed() {	  clientUI.display("Vous avez bien été déconnecté");  }  @Override  protected void connectionException(Exception exception) {	  System.out.println("La connexion a été interrompue.");  }  @Override  protected void connectionEstablished() {	  clientUI.display("Vous êtes connecté");  }  }//End of ChatClient class