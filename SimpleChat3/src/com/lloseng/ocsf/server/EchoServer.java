package com.lloseng.ocsf.server;// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.io.*;import com.lloseng.ocsf.client.ChatIF;/** * This class overrides some of the methods in the abstract  * superclass in order to give more functionality to the server. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave;re * @author Fran&ccedil;ois B&eacute;langer * @author Paul Holden * @version July 2000 */public class EchoServer extends AbstractServer {  //Class variables *************************************************    /**   * The default port to listen on.   */  final public static int DEFAULT_PORT = 5555;    //Constructors ****************************************************  ChatIF serverUI;   /**   * Constructs an instance of the echo server.   *   * @param port The port number to connect on.   */  public EchoServer(int port, ChatIF serverUI)   {    super(port);    this.serverUI = serverUI;  }    //Instance methods ************************************************    /**	 * This method handles any messages received from the client.	 *	 * @param msg The message received from the client.	 * @param client The connection from which the message originated.	 */	public void handleMessageFromClient	(Object msg, ConnectionToClient client)	{		if(msg.toString().startsWith("#logoff")) {			try {				client.close();				client.setInfo("id", null);			} catch (IOException e) {}		} 		else if(msg.toString().startsWith("#login")) 		{			String idClient = msg.toString().split(" ")[1];			if(!isLogged(client)) {				client.setInfo("id", idClient);			}		}		else {			System.out.println("Message received: " + msg + " from " + client);			msg = client.getInfo("id") + " : " + msg;			this.sendToAllClients(msg);		}	}  /**   * This method overrides the one in the superclass.  Called   * when the server starts listening for connections.   */  protected void serverStarted()  {    System.out.println      ("Server listening for connections on port " + getPort());  }    /**   * This method overrides the one in the superclass.  Called   * when the server stops listening for connections.   */  protected void serverStopped()  {    System.out.println      ("Server has stopped listening for connections.");  }    //Class methods ***************************************************    @Override	protected synchronized void clientDisconnected(ConnectionToClient client) {		System.out.println("A client disconnected : " + client);	}		@Override	protected void clientConnected(ConnectionToClient client) {		System.out.println("Un client vient de se connecter : " + client);	}	@Override	protected synchronized void clientException(ConnectionToClient client, Throwable exception) {		System.out.println("Un client s'est brusquement déconnecté du serveur");	}		public void handleMessageFromServerConsole(String message) {		if(message.startsWith("#")) {			try {				handleCommand(message);			}			catch (IOException e) {				e.printStackTrace();			}		}		else sendToAllClients("Server MSG > " + message);	}	private void handleCommand(String message) throws IOException {		if (message.startsWith("#quit")) {			System.exit(0);		}		else if (message.startsWith("#stop")) {			if(isListening()) {				stop(); 			}			else {				System.out.println("Le serveur n'ecoute déjà plus");			}		}		else if (message.startsWith("#close")) {			sendToAllClients(message);			close();		}		else if (message.startsWith("#start")) {			if(!isListening()) {				listen();			}			else { 				System.out.println("Le serveur ecoute déjà");			}		}		else if(message.startsWith("#setport")) {			String[] port = message.split(" ");			setPort(Integer.parseInt(port[1])); 		}		else if(message.startsWith("#getport")) {			System.out.println("port : "+ getPort());		}		else {			System.out.println("Commande incorrecte");		}	}	private boolean isLogged(ConnectionToClient client) {		return client.getInfo("id") != null ;	}	private void stop() {		stopListening();	}  }//End of EchoServer class